


pipeline-script samples


--------------------------------------------------------------------------
# basic
--------------------------------------------------------------------------
node {
    echo 'Hello World'
}


--------------------------------------------------------------------------
# pipeline with stages
--------------------------------------------------------------------------
node {
   stage('stage 1'){
       echo 'Hello World'
   }
   stage('stage 2'){
       echo 'im in stage 2'
   }
}

--------------------------------------------------------------------------
# pipeline with stage & steps
--------------------------------------------------------------------------


node {
  
  stage('echo'){
      sh 'echo "Hello World"'
      sh '''
            echo "Multiline shell steps works too"
            ls -lah
        '''
  }
  
}


--------------------------------------------------------------------------
  checking type of Node 
--------------------------------------------------------------------------


node {
  
  stage('list directory'){
      if(isUnix()){
          sh "ls -la"
      }else{
          bat 'dir'
      }
  }
  
}



--------------------------------------------------------------------------
  Checkout code from SCM i.e git
--------------------------------------------------------------------------


node {
  
  stage('checkout'){
    git 'https://github.com/effectivejenkins/my-awesome-project.git'
  }
  stage('Say Hello'){
      sh './say_hello.sh'
  }
  
}


--------------------------------------------------------------------------
  Managing passwords in pipeline
--------------------------------------------------------------------------


node {
  stage('use passwords'){
    withCredentials([usernamePassword(credentialsId: 'my_id_1', passwordVariable: 'MY_PASSWORD', usernameVariable: 'MY_USERNAME')]) {
        echo "My Password is '${MY_PASSWORD}'!"
    }
  }
  
}

--------------------------------------------------------------------------
  Finishing up Build
--------------------------------------------------------------------------

node {
    try{
        stage("echo"){
            sh 'echo "Hello World"'
            def obj=null
            sh "${obj.class}"
        }
    }catch(NullPointerException e){
        error 'broken pipeline - null pointer exception'
        currentBuild.result='FAILURE'
        //currentBuild.result='UNSTABLE'
    } 
    finally{
        stage('post build'){
            echo 'this always run'
        }
    }
}

note : each stage can have own try-bock


--------------------------------------------------------------------------
  Email Notification
--------------------------------------------------------------------------

note : configure email Notification in jenkins's configure system


node {
    try{
        stage("echo"){
            sh 'echo "Hello World"'
            def obj=null
            sh "${obj.class}"
        }
    }catch(NullPointerException e){
        error 'broken pipeline - null pointer exception'
        currentBuild.result='FAILURE'
        //currentBuild.result='UNSTABLE'
    } 
    finally{
        stage('post build'){
            mail bcc: '', body: "something is wrong  with ${env.BUILD_URL}", cc: '', from: '', replyTo: '', subject: "Failed Pipeline ${currentBuild.fullDisplayName}", to: 'someone@email.com'
        }
    }
}



--------------------------------------------------------------------------
  Declarative Pipeline
--------------------------------------------------------------------------

pipeline{
    agent {
        label 'linux'
    }
    tools{
        maven 'M3'
    }
    parameters{
        string(name:'VERSION',defaultValue:'1.0.0',description:'what is the version build?')
    }
    stages{
        stage("Build) {
            steps{
                sh 'echo "${params.VERSION}"'
            }
        }
    }
    post{
        always{
            echo ' i will execute always'
        }
    }
}

--------------------------------------------------------------------------
  Jenkins file  from SCM
--------------------------------------------------------------------------

pipeline{
    agent any
    stages{
        stage('checkout){
            steps{
                git ''
            }
        }
        stage('Build'){
            steps{
                sh 'mvn clean compile'
            }
        }
        stage('Test'){
            steps{
                sh 'mvn test'
                junit '**/target/surefire-reports/Test-*.xml'
            }
        }
        stage{
            steps{
                sh 'mvn package'
            }
        }
    }
}



--------------------------------------------------------------------------
  Building with Docker
--------------------------------------------------------------------------

a. single agent for complete pipeline

pipeline{
    agent {docker 'maven:3.5-alpine}
    stages{
        stage('Example build'){
            steps{
                sh 'mvn --version'
            }
        }
    }
}



b. separate agent for each pipeline's stage

pipeline{
    agent none
    stages{
        stage('Example build'){
            agent {docker 'maven:3.5-alpine}
            steps{
                echo 'Hello Maven'
                sh 'mvn --version'
            }
        }
         stage('Example Test'){
            agent {docker 'openjdk:8-jre'}
            steps{
                echo 'Hello JDK'
                sh 'java --version'
            }
        }
    }
}


--------------------------------------------------------------------------
  Creating Continuous Delivery Pipeline
--------------------------------------------------------------------------

Build
---------

pipeline{
    agent {docker 'maven:3.5-alpine}
    stages{
        stage('checkout'){
            steps{
                git 'repo-url'
            }
        }
        stage('Build'){
            steps{
                sh 'mvn clean package'
                junit '**/target/surefire-reports/TEST-*.xml'
            }
        }
    }
}


Archiving Artifacts
--------------------

pipeline{
    agent {label 'linux'}
    stages{
        stage('checkout'){
            steps{
                git 'repo-url'
            }
        }
        stage('Build'){
            agent {docker 'maven:3.5-alpine'}
            steps{
                sh 'mvn clean package'
                junit '**/target/surefire-reports/TEST-*.xml'
                archiveArtifacts artifacts: 'target/*.jar' fingerprint: true
            }
        }
    }
}


Continouse Delivery ( deploying our Java Project)
-------------------------------------------------

pipeline{
    agent {docker 'maven:3.5-alpine}
    stages{
        stage('checkout'){
            steps{
                git 'repo-url'
            }
        }
        stage('Build'){
            steps{
                sh 'mvn clean package'
                junit '**/target/surefire-reports/TEST-*.xml'
                archiveArtifacts artifacts: 'target/*.jar' fingerprint: true
            }
        }
        stage('Deploy'){
            steps{
                input 'Do you approve for deployement ?'
                //echo 'deploying>>>>'
                sh 'scp target/*.jar jenkins@target-ip-address:/opt/'
                sh "ssh jenkins@target-ip-address 'nohup java -jar /opt/xxx.jar &'" 
            }
        }
    }
}


-----------------------------------------------------------------------------------------


